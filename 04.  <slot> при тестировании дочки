Затыкаем <slot> в дочке при ее тестировании.


КОД
//родитель
<template>
  <car>
    <template>Title</template>
    <template #fb>
      Привет
    </template>
  </car>
</template>


//дочка car.vue
<div>
   <slot/>                   //сюда вставиться Title
   <slot/>                   //сюда вставиться Title
   <slot name="fb"/>         //сюда вставиться Привет
</div>




ТЕСТ
//дочка.spec.js          //тестируем дочку, в которой есть <slot>.

import Bar from './Bar.vue'            //заглушка одного слота в дочке
import FooBar from './FooBar.vue'      //заглушка второго слота в дочке

const wrapper = mount(Car, {
  slots: {                    //заглушка на слот у данного поднимаемого ребенка
    default: FooBar,          //компонент FooBar вставиться в неименованный слот у ребенка (рендерить FooBar, как см ниже, не нужно).
    default: [Bar, FooBar],   //Да.
    default: '<div>go</div>',
    default: 'Привет',
    fb: FooBar,              //компонент FooBar вставиться в ИМЕНОВАННЫЙ слот у дочки <slot name="fb" />.
    fb: '<div>go</div>'
  }
})




...................................
СЛОТ с ИЗМЕНЯЕМЫМИ своими параметрами потоком сверху-вниз.

Если в качестве заглушки используем компонент,
в котором мы желаем переопределять входные для него параметры, Нр его пропс,
то делаем так:

import FooBar from './FooBar.vue'

let FooBarWrapper = {       //оно будет заглушкой на <slot> в дочке Car.
  render(h) {
    return h(FooBar, {
      props: {                //именно "props", а не "propsData". Это заглушка на пропс у FooBar.
        text: 'Home'
      }
    })
  }
}

const wrapper = mount(Car, {   //поднимаемый и тестируемый компонент-дочка, на <slot> в котором ставим заглушку FooBarWrapper.
  slots: {
    default: FooBarWrapper
  }
})

expect(wrapper.find(FooBarWrapper).isVueInstance()).toBe(true)  
//FooBarWrapper- не просто ..., а полноценный VueInstance.


см. https://ru.vuejs.org/v2/guide/render-function.html



= Это полезно при тестировании тройного каскада, Нр:
<template>
  <div id="app">
    <div>
      Go
    <div/>

    <MessageList>   //дочка с заявленными в ней слотами
      <header slot="header">    //слот_1
        Awesome header
      </header>

      <Message :message="message" slot="massage"/>  //слот_2, но который имеет изменяяемые через его пропс данные.
    </MessageList>

  </div>
</template>


..........................
NB! (но, возможно, это уже устарело)
Важно, чтобы <slot> в дочке были обёрнуты тегом HTML, иначе Vue Test Utils будет жаловаться.

//Дочка
<template>
  <div>
    <header class="list-header">
      <slot name="header">
        This is a default header
      </slot>ь 
    </header>

    <ul class="list-messages">
      <slot></slot>
    </ul>
  </div>
</template>




